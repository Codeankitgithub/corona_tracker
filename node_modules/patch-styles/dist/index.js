import React from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var getMappedClassNameProps = function getMappedClassNameProps(props, extraProps, namesMap) {
  var mappedProps = {};
  var propsToMap = Object.keys(props).filter(function (key) {
    return key === 'className' || extraProps.includes(key);
  });
  propsToMap.forEach(function (key) {
    mappedProps[key] = mapAndMergeClassNames(props[key], namesMap);
  });
  return propsToMap.length ? mappedProps : null;
};

var mapAndMergeClassNames = function mapAndMergeClassNames(className, namesMap) {
  var namesArray = Array.isArray(className) ? className : [className];
  var splitNamesArr = namesArray.flatMap(function (name) {
    return splitClassName(name);
  });
  return splitNamesArr.map(function (name) {
    var _namesMap$name;

    return (_namesMap$name = namesMap[name]) != null ? _namesMap$name : name;
  }).join(' ');
};

var splitClassName = function splitClassName(className) {
  return className.split(/\s+/g);
};

var patchClassNamesOfChildren = function patchClassNamesOfChildren(namesMap, extraProps, children) {
  var childOrChildren = patchClassNamesWithChildrenMap(namesMap, extraProps, children);

  if (!Array.isArray(children) && !React.isValidElement(children)) {
    return children;
  }

  try {
    React.Children.only(children);
    return Array.isArray(childOrChildren) ? childOrChildren[0] : childOrChildren;
  } catch (err) {
    return childOrChildren;
  }
};

var patchClassNamesWithChildrenMap = function patchClassNamesWithChildrenMap(namesMap, extraProps, children) {
  return React.Children.map(children, function (child) {
    if (!React.isValidElement(child)) {
      return child;
    }

    return patchClassNamesForReactNode(child, namesMap, extraProps);
  });
};

var patchClassNamesForReactNode = function patchClassNamesForReactNode(child, namesMap, extraProps) {
  var allMappedOrPatchedProps = getAllMappedOrPatchedProps(child.props, extraProps, namesMap);
  var patchedChildren = patchClassNamesOfChildren(namesMap, extraProps, child.props.children);
  var hasValidChildren = React.Children.toArray(child.props.children).some(function (node) {
    return React.isValidElement(node);
  });

  if (!allMappedOrPatchedProps && !hasValidChildren) {
    return child;
  }

  return React.cloneElement(child, allMappedOrPatchedProps != null ? allMappedOrPatchedProps : {}, patchedChildren);
};

var getAllMappedOrPatchedProps = function getAllMappedOrPatchedProps(props, extraProps, namesMap) {
  var mappedClassNameProps = getMappedClassNameProps(props, extraProps, namesMap);
  var patchedNodeProps = getPatchedNodeProps(props, extraProps, namesMap);

  if (!mappedClassNameProps && !patchedNodeProps) {
    return null;
  }

  return _extends({}, mappedClassNameProps, patchedNodeProps);
};

var getPatchedNodeProps = function getPatchedNodeProps(props, extraProps, namesMap) {
  var patchedNodeProps = {};
  var propsToMap = Object.keys(props).filter(function (key) {
    return React.isValidElement(props[key]);
  });
  propsToMap.forEach(function (key) {
    patchedNodeProps[key] = patchClassNamesForReactNode(props[key], namesMap, extraProps);
  });
  return propsToMap.length ? patchedNodeProps : null;
};

var PatchStyles = function PatchStyles(_ref) {
  var classNames = _ref.classNames,
      extraProps = _ref.extraProps,
      children = _ref.children;

  if (!children) {
    throw new Error('ApplyStyles should always have children to apply styles too');
  }

  var extraPropsArr = Array.isArray(extraProps) ? extraProps : [extraProps];
  var extraPropsSplit = extraPropsArr.flatMap(function (props) {
    return (props != null ? props : '').split(/\s*,\s*/g);
  });
  return React.createElement(React.Fragment, null, patchClassNamesOfChildren(classNames, extraPropsSplit, children));
};

export default PatchStyles;
//# sourceMappingURL=index.js.map
